import sharp from 'sharp'
import fs from 'fs/promises'
import path from 'path'

const safeUnlink = async (filepath, retries = 5, delay = 10) => {
  for (let i = 0; i < retries; i++) {
    try {
      await fs.unlink(filepath)
      console.log('üóëÔ∏è ƒê√£ xo√° ·∫£nh:', filepath)
      return
    } catch (err) {
      if (i === retries - 1) {
        console.warn(`‚ùå Kh√¥ng th·ªÉ xo√° file sau ${retries} l·∫ßn: ${filepath}`, err.message)
        return
      }
      await new Promise(resolve => setTimeout(resolve, delay))
    }
  }
}

export const resizeImages = async (req, res, next) => {
console.log('üöÄ ~ file: imageResize.js:51 ~ resizeImages ~ req:', req.files.length)


  if (!req.files || req.files.length === 0) return next();

  try {
    const resizedFiles = [];

    for (const file of req.files) {
      // ƒê·ª£i file ƒë∆∞·ª£c ghi xong tr∆∞·ªõc khi x·ª≠ l√Ω
      let retries = 0;
      while (retries < 5) {
        try {
          await fs.access(file.path); // check file t·ªìn t·∫°i
          break;
        } catch {
          await new Promise(r => setTimeout(r, 100)); // ch·ªù 100ms
          retries++;
        }
      }

      const ext = path.extname(file.filename);
      const resizedFilename = file.filename.replace(ext, `-resized${ext}`);
      const outputPath = path.join(file.destination, resizedFilename);

      try {
        await sharp(file.path)
          .resize({ width: 1024 })
          .toFile(outputPath);
      } catch (resizeError) {
        console.warn(`‚ö†Ô∏è B·ªè qua ·∫£nh l·ªói ${file.originalname}:`, resizeError.message);
        continue; // skip file l·ªói
      }

      try {
        await safeUnlink(file.path); // xo√° file g·ªëc
      } catch (e) {
        console.warn(`‚ùå Kh√¥ng th·ªÉ xo√° file: ${file.path}`, e.message);
      }

      resizedFiles.push({
        ...file,
        filename: resizedFilename,
        path: outputPath
      });
    }
    
    req.files = resizedFiles
    next();
  } catch (err) {
    console.error('‚ùå Resize l·ªói:', err);
    return res.status(500).json({ message: 'L·ªói x·ª≠ l√Ω ·∫£nh' });
  }
}